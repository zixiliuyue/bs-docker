
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/Tencent/bk-bcs/bcs-runtime/bcs-k8s/kubernetes/apis/cloud/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NodeNetworkLister helps list NodeNetworks.
type NodeNetworkLister interface {
	// List lists all NodeNetworks in the indexer.
	List(selector labels.Selector) (ret []*v1.NodeNetwork, err error)
	// NodeNetworks returns an object that can list and get NodeNetworks.
	NodeNetworks(namespace string) NodeNetworkNamespaceLister
	NodeNetworkListerExpansion
}

// nodeNetworkLister implements the NodeNetworkLister interface.
type nodeNetworkLister struct {
	indexer cache.Indexer
}

// NewNodeNetworkLister returns a new NodeNetworkLister.
func NewNodeNetworkLister(indexer cache.Indexer) NodeNetworkLister {
	return &nodeNetworkLister{indexer: indexer}
}

// List lists all NodeNetworks in the indexer.
func (s *nodeNetworkLister) List(selector labels.Selector) (ret []*v1.NodeNetwork, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodeNetwork))
	})
	return ret, err
}

// NodeNetworks returns an object that can list and get NodeNetworks.
func (s *nodeNetworkLister) NodeNetworks(namespace string) NodeNetworkNamespaceLister {
	return nodeNetworkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// NodeNetworkNamespaceLister helps list and get NodeNetworks.
type NodeNetworkNamespaceLister interface {
	// List lists all NodeNetworks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.NodeNetwork, err error)
	// Get retrieves the NodeNetwork from the indexer for a given namespace and name.
	Get(name string) (*v1.NodeNetwork, error)
	NodeNetworkNamespaceListerExpansion
}

// nodeNetworkNamespaceLister implements the NodeNetworkNamespaceLister
// interface.
type nodeNetworkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all NodeNetworks in the indexer for a given namespace.
func (s nodeNetworkNamespaceLister) List(selector labels.Selector) (ret []*v1.NodeNetwork, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NodeNetwork))
	})
	return ret, err
}

// Get retrieves the NodeNetwork from the indexer for a given namespace and name.
func (s nodeNetworkNamespaceLister) Get(name string) (*v1.NodeNetwork, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("nodenetwork"), name)
	}
	return obj.(*v1.NodeNetwork), nil
}
