
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/Tencent/bk-bcs/bcs-runtime/bcs-k8s/kubernetes/apis/networkextension/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PortPoolLister helps list PortPools.
type PortPoolLister interface {
	// List lists all PortPools in the indexer.
	List(selector labels.Selector) (ret []*v1.PortPool, err error)
	// PortPools returns an object that can list and get PortPools.
	PortPools(namespace string) PortPoolNamespaceLister
	PortPoolListerExpansion
}

// portPoolLister implements the PortPoolLister interface.
type portPoolLister struct {
	indexer cache.Indexer
}

// NewPortPoolLister returns a new PortPoolLister.
func NewPortPoolLister(indexer cache.Indexer) PortPoolLister {
	return &portPoolLister{indexer: indexer}
}

// List lists all PortPools in the indexer.
func (s *portPoolLister) List(selector labels.Selector) (ret []*v1.PortPool, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PortPool))
	})
	return ret, err
}

// PortPools returns an object that can list and get PortPools.
func (s *portPoolLister) PortPools(namespace string) PortPoolNamespaceLister {
	return portPoolNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PortPoolNamespaceLister helps list and get PortPools.
type PortPoolNamespaceLister interface {
	// List lists all PortPools in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.PortPool, err error)
	// Get retrieves the PortPool from the indexer for a given namespace and name.
	Get(name string) (*v1.PortPool, error)
	PortPoolNamespaceListerExpansion
}

// portPoolNamespaceLister implements the PortPoolNamespaceLister
// interface.
type portPoolNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PortPools in the indexer for a given namespace.
func (s portPoolNamespaceLister) List(selector labels.Selector) (ret []*v1.PortPool, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.PortPool))
	})
	return ret, err
}

// Get retrieves the PortPool from the indexer for a given namespace and name.
func (s portPoolNamespaceLister) Get(name string) (*v1.PortPool, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("portpool"), name)
	}
	return obj.(*v1.PortPool), nil
}
