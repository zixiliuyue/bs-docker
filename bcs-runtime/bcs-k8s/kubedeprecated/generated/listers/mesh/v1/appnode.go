
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/Tencent/bk-bcs/bcs-runtime/bcs-k8s/kubedeprecated/apis/mesh/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AppNodeLister helps list AppNodes.
type AppNodeLister interface {
	// List lists all AppNodes in the indexer.
	List(selector labels.Selector) (ret []*v1.AppNode, err error)
	// AppNodes returns an object that can list and get AppNodes.
	AppNodes(namespace string) AppNodeNamespaceLister
	AppNodeListerExpansion
}

// appNodeLister implements the AppNodeLister interface.
type appNodeLister struct {
	indexer cache.Indexer
}

// NewAppNodeLister returns a new AppNodeLister.
func NewAppNodeLister(indexer cache.Indexer) AppNodeLister {
	return &appNodeLister{indexer: indexer}
}

// List lists all AppNodes in the indexer.
func (s *appNodeLister) List(selector labels.Selector) (ret []*v1.AppNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AppNode))
	})
	return ret, err
}

// AppNodes returns an object that can list and get AppNodes.
func (s *appNodeLister) AppNodes(namespace string) AppNodeNamespaceLister {
	return appNodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AppNodeNamespaceLister helps list and get AppNodes.
type AppNodeNamespaceLister interface {
	// List lists all AppNodes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AppNode, err error)
	// Get retrieves the AppNode from the indexer for a given namespace and name.
	Get(name string) (*v1.AppNode, error)
	AppNodeNamespaceListerExpansion
}

// appNodeNamespaceLister implements the AppNodeNamespaceLister
// interface.
type appNodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AppNodes in the indexer for a given namespace.
func (s appNodeNamespaceLister) List(selector labels.Selector) (ret []*v1.AppNode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AppNode))
	})
	return ret, err
}

// Get retrieves the AppNode from the indexer for a given namespace and name.
func (s appNodeNamespaceLister) Get(name string) (*v1.AppNode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("appnode"), name)
	}
	return obj.(*v1.AppNode), nil
}
