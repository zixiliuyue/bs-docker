

// Code generated by lister-gen. DO NOT EDIT.

package v2

import (
	v2 "github.com/Tencent/bk-bcs/bcs-runtime/bcs-mesos/kubebkbcsv2/apis/bkbcs/v2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BcsServiceLister helps list BcsServices.
type BcsServiceLister interface {
	// List lists all BcsServices in the indexer.
	List(selector labels.Selector) (ret []*v2.BcsService, err error)
	// BcsServices returns an object that can list and get BcsServices.
	BcsServices(namespace string) BcsServiceNamespaceLister
	BcsServiceListerExpansion
}

// bcsServiceLister implements the BcsServiceLister interface.
type bcsServiceLister struct {
	indexer cache.Indexer
}

// NewBcsServiceLister returns a new BcsServiceLister.
func NewBcsServiceLister(indexer cache.Indexer) BcsServiceLister {
	return &bcsServiceLister{indexer: indexer}
}

// List lists all BcsServices in the indexer.
func (s *bcsServiceLister) List(selector labels.Selector) (ret []*v2.BcsService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v2.BcsService))
	})
	return ret, err
}

// BcsServices returns an object that can list and get BcsServices.
func (s *bcsServiceLister) BcsServices(namespace string) BcsServiceNamespaceLister {
	return bcsServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BcsServiceNamespaceLister helps list and get BcsServices.
type BcsServiceNamespaceLister interface {
	// List lists all BcsServices in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v2.BcsService, err error)
	// Get retrieves the BcsService from the indexer for a given namespace and name.
	Get(name string) (*v2.BcsService, error)
	BcsServiceNamespaceListerExpansion
}

// bcsServiceNamespaceLister implements the BcsServiceNamespaceLister
// interface.
type bcsServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BcsServices in the indexer for a given namespace.
func (s bcsServiceNamespaceLister) List(selector labels.Selector) (ret []*v2.BcsService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v2.BcsService))
	})
	return ret, err
}

// Get retrieves the BcsService from the indexer for a given namespace and name.
func (s bcsServiceNamespaceLister) Get(name string) (*v2.BcsService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v2.Resource("bcsservice"), name)
	}
	return obj.(*v2.BcsService), nil
}
