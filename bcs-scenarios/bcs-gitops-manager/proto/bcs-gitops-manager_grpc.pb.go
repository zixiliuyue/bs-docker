// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/bcs-gitops-manager.proto

package bcsgitopsmanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BcsGitopsManagerClient is the client API for BcsGitopsManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BcsGitopsManagerClient interface {
	Ping(ctx context.Context, in *GitOpsRequest, opts ...grpc.CallOption) (*GitOpsResponse, error)
	StartupProject(ctx context.Context, in *ProjectSyncRequest, opts ...grpc.CallOption) (*GitOpsResponse, error)
	SyncCluster(ctx context.Context, in *ClusterSyncRequest, opts ...grpc.CallOption) (*GitOpsResponse, error)
}

type bcsGitopsManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewBcsGitopsManagerClient(cc grpc.ClientConnInterface) BcsGitopsManagerClient {
	return &bcsGitopsManagerClient{cc}
}

func (c *bcsGitopsManagerClient) Ping(ctx context.Context, in *GitOpsRequest, opts ...grpc.CallOption) (*GitOpsResponse, error) {
	out := new(GitOpsResponse)
	err := c.cc.Invoke(ctx, "/bcsgitopsmanager.BcsGitopsManager/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsGitopsManagerClient) StartupProject(ctx context.Context, in *ProjectSyncRequest, opts ...grpc.CallOption) (*GitOpsResponse, error) {
	out := new(GitOpsResponse)
	err := c.cc.Invoke(ctx, "/bcsgitopsmanager.BcsGitopsManager/StartupProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsGitopsManagerClient) SyncCluster(ctx context.Context, in *ClusterSyncRequest, opts ...grpc.CallOption) (*GitOpsResponse, error) {
	out := new(GitOpsResponse)
	err := c.cc.Invoke(ctx, "/bcsgitopsmanager.BcsGitopsManager/SyncCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BcsGitopsManagerServer is the server API for BcsGitopsManager service.
// All implementations must embed UnimplementedBcsGitopsManagerServer
// for forward compatibility
type BcsGitopsManagerServer interface {
	Ping(context.Context, *GitOpsRequest) (*GitOpsResponse, error)
	StartupProject(context.Context, *ProjectSyncRequest) (*GitOpsResponse, error)
	SyncCluster(context.Context, *ClusterSyncRequest) (*GitOpsResponse, error)
	mustEmbedUnimplementedBcsGitopsManagerServer()
}

// UnimplementedBcsGitopsManagerServer must be embedded to have forward compatible implementations.
type UnimplementedBcsGitopsManagerServer struct {
}

func (UnimplementedBcsGitopsManagerServer) Ping(context.Context, *GitOpsRequest) (*GitOpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedBcsGitopsManagerServer) StartupProject(context.Context, *ProjectSyncRequest) (*GitOpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartupProject not implemented")
}
func (UnimplementedBcsGitopsManagerServer) SyncCluster(context.Context, *ClusterSyncRequest) (*GitOpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncCluster not implemented")
}
func (UnimplementedBcsGitopsManagerServer) mustEmbedUnimplementedBcsGitopsManagerServer() {}

// UnsafeBcsGitopsManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BcsGitopsManagerServer will
// result in compilation errors.
type UnsafeBcsGitopsManagerServer interface {
	mustEmbedUnimplementedBcsGitopsManagerServer()
}

func RegisterBcsGitopsManagerServer(s grpc.ServiceRegistrar, srv BcsGitopsManagerServer) {
	s.RegisterService(&BcsGitopsManager_ServiceDesc, srv)
}

func _BcsGitopsManager_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitOpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsGitopsManagerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcsgitopsmanager.BcsGitopsManager/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsGitopsManagerServer).Ping(ctx, req.(*GitOpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsGitopsManager_StartupProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsGitopsManagerServer).StartupProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcsgitopsmanager.BcsGitopsManager/StartupProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsGitopsManagerServer).StartupProject(ctx, req.(*ProjectSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsGitopsManager_SyncCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsGitopsManagerServer).SyncCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcsgitopsmanager.BcsGitopsManager/SyncCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsGitopsManagerServer).SyncCluster(ctx, req.(*ClusterSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BcsGitopsManager_ServiceDesc is the grpc.ServiceDesc for BcsGitopsManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BcsGitopsManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bcsgitopsmanager.BcsGitopsManager",
	HandlerType: (*BcsGitopsManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _BcsGitopsManager_Ping_Handler,
		},
		{
			MethodName: "StartupProject",
			Handler:    _BcsGitopsManager_StartupProject_Handler,
		},
		{
			MethodName: "SyncCluster",
			Handler:    _BcsGitopsManager_SyncCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bcs-gitops-manager.proto",
}
