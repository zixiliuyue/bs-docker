// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/bcs-gitops-webhook.proto

package bcsgitopsmanager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BcsGitopsWebhookClient is the client API for BcsGitopsWebhook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BcsGitopsWebhookClient interface {
	TGitWebhook(ctx context.Context, in *TGitWebhookRequest, opts ...grpc.CallOption) (*TGitWebhookResponse, error)
	GeneralWebhook(ctx context.Context, in *GeneralWebhookRequest, opts ...grpc.CallOption) (*GeneralWebhookResponse, error)
}

type bcsGitopsWebhookClient struct {
	cc grpc.ClientConnInterface
}

func NewBcsGitopsWebhookClient(cc grpc.ClientConnInterface) BcsGitopsWebhookClient {
	return &bcsGitopsWebhookClient{cc}
}

func (c *bcsGitopsWebhookClient) TGitWebhook(ctx context.Context, in *TGitWebhookRequest, opts ...grpc.CallOption) (*TGitWebhookResponse, error) {
	out := new(TGitWebhookResponse)
	err := c.cc.Invoke(ctx, "/bcsgitopsmanager.BcsGitopsWebhook/TGitWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bcsGitopsWebhookClient) GeneralWebhook(ctx context.Context, in *GeneralWebhookRequest, opts ...grpc.CallOption) (*GeneralWebhookResponse, error) {
	out := new(GeneralWebhookResponse)
	err := c.cc.Invoke(ctx, "/bcsgitopsmanager.BcsGitopsWebhook/GeneralWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BcsGitopsWebhookServer is the server API for BcsGitopsWebhook service.
// All implementations must embed UnimplementedBcsGitopsWebhookServer
// for forward compatibility
type BcsGitopsWebhookServer interface {
	TGitWebhook(context.Context, *TGitWebhookRequest) (*TGitWebhookResponse, error)
	GeneralWebhook(context.Context, *GeneralWebhookRequest) (*GeneralWebhookResponse, error)
	mustEmbedUnimplementedBcsGitopsWebhookServer()
}

// UnimplementedBcsGitopsWebhookServer must be embedded to have forward compatible implementations.
type UnimplementedBcsGitopsWebhookServer struct {
}

func (UnimplementedBcsGitopsWebhookServer) TGitWebhook(context.Context, *TGitWebhookRequest) (*TGitWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TGitWebhook not implemented")
}
func (UnimplementedBcsGitopsWebhookServer) GeneralWebhook(context.Context, *GeneralWebhookRequest) (*GeneralWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GeneralWebhook not implemented")
}
func (UnimplementedBcsGitopsWebhookServer) mustEmbedUnimplementedBcsGitopsWebhookServer() {}

// UnsafeBcsGitopsWebhookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BcsGitopsWebhookServer will
// result in compilation errors.
type UnsafeBcsGitopsWebhookServer interface {
	mustEmbedUnimplementedBcsGitopsWebhookServer()
}

func RegisterBcsGitopsWebhookServer(s grpc.ServiceRegistrar, srv BcsGitopsWebhookServer) {
	s.RegisterService(&BcsGitopsWebhook_ServiceDesc, srv)
}

func _BcsGitopsWebhook_TGitWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TGitWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsGitopsWebhookServer).TGitWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcsgitopsmanager.BcsGitopsWebhook/TGitWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsGitopsWebhookServer).TGitWebhook(ctx, req.(*TGitWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BcsGitopsWebhook_GeneralWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneralWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BcsGitopsWebhookServer).GeneralWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bcsgitopsmanager.BcsGitopsWebhook/GeneralWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BcsGitopsWebhookServer).GeneralWebhook(ctx, req.(*GeneralWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BcsGitopsWebhook_ServiceDesc is the grpc.ServiceDesc for BcsGitopsWebhook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BcsGitopsWebhook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bcsgitopsmanager.BcsGitopsWebhook",
	HandlerType: (*BcsGitopsWebhookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TGitWebhook",
			Handler:    _BcsGitopsWebhook_TGitWebhook_Handler,
		},
		{
			MethodName: "GeneralWebhook",
			Handler:    _BcsGitopsWebhook_GeneralWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bcs-gitops-webhook.proto",
}
