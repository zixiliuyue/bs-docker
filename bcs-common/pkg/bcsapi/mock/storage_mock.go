// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock is a generated GoMock package.
package mock

import (
	storage "github.com/Tencent/bk-bcs/bcs-common/pkg/bcsapi/storage"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// QueryMesosTaskgroup mocks base method
func (m *MockStorage) QueryMesosTaskgroup(cluster string) ([]*storage.Taskgroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryMesosTaskgroup", cluster)
	ret0, _ := ret[0].([]*storage.Taskgroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryMesosTaskgroup indicates an expected call of QueryMesosTaskgroup
func (mr *MockStorageMockRecorder) QueryMesosTaskgroup(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryMesosTaskgroup", reflect.TypeOf((*MockStorage)(nil).QueryMesosTaskgroup), cluster)
}

// QueryK8SPod mocks base method
func (m *MockStorage) QueryK8SPod(cluster string) ([]*storage.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryK8SPod", cluster)
	ret0, _ := ret[0].([]*storage.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryK8SPod indicates an expected call of QueryK8SPod
func (mr *MockStorageMockRecorder) QueryK8SPod(cluster interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryK8SPod", reflect.TypeOf((*MockStorage)(nil).QueryK8SPod), cluster)
}

// GetIPPoolDetailInfo mocks base method
func (m *MockStorage) GetIPPoolDetailInfo(clusterID string) ([]*storage.IPPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPPoolDetailInfo", clusterID)
	ret0, _ := ret[0].([]*storage.IPPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIPPoolDetailInfo indicates an expected call of GetIPPoolDetailInfo
func (mr *MockStorageMockRecorder) GetIPPoolDetailInfo(clusterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPPoolDetailInfo", reflect.TypeOf((*MockStorage)(nil).GetIPPoolDetailInfo), clusterID)
}
