// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2019 HAProxy Technologies
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProcessInfo HAProxy Information
//
// General HAProxy process information
// swagger:model process_info
type ProcessInfo struct {

	// haproxy
	Haproxy *ProcessInfoHaproxy `json:"haproxy,omitempty"`
}

// Validate validates this process info
func (m *ProcessInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHaproxy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessInfo) validateHaproxy(formats strfmt.Registry) error {

	if swag.IsZero(m.Haproxy) { // not required
		return nil
	}

	if m.Haproxy != nil {
		if err := m.Haproxy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("haproxy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessInfo) UnmarshalBinary(b []byte) error {
	var res ProcessInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProcessInfoHaproxy process info haproxy
// swagger:model ProcessInfoHaproxy
type ProcessInfoHaproxy struct {

	// Process id of the replying worker process
	Pid *int64 `json:"pid,omitempty"`

	// Number of spawned processes
	Processes *int64 `json:"processes,omitempty"`

	// HAProxy version release date
	// Format: date
	ReleaseDate strfmt.Date `json:"release_date,omitempty"`

	// HAProxy uptime in s
	Uptime *int64 `json:"uptime,omitempty"`

	// HAProxy version string
	Version string `json:"version,omitempty"`
}

// Validate validates this process info haproxy
func (m *ProcessInfoHaproxy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReleaseDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessInfoHaproxy) validateReleaseDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ReleaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("haproxy"+"."+"release_date", "body", "date", m.ReleaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessInfoHaproxy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessInfoHaproxy) UnmarshalBinary(b []byte) error {
	var res ProcessInfoHaproxy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
