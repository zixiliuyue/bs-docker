// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/meshmanager/meshmanager.proto

package meshmanager

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MeshManager service

func NewMeshManagerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "MeshManager.CreateMeshCluster",
			Path:    []string{"/meshmanager/v1/meshcluster"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "MeshManager.DeleteMeshCluster",
			Path:    []string{"/meshmanager/v1/meshcluster"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "MeshManager.ListMeshCluster",
			Path:    []string{"/meshmanager/v1/meshcluster"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
	}
}

// Client API for MeshManager service

type MeshManagerService interface {
	CreateMeshCluster(ctx context.Context, in *CreateMeshClusterReq, opts ...client.CallOption) (*CreateMeshClusterResp, error)
	DeleteMeshCluster(ctx context.Context, in *DeleteMeshClusterReq, opts ...client.CallOption) (*DeleteMeshClusterResp, error)
	ListMeshCluster(ctx context.Context, in *ListMeshClusterReq, opts ...client.CallOption) (*ListMeshClusterResp, error)
}

type meshManagerService struct {
	c    client.Client
	name string
}

func NewMeshManagerService(name string, c client.Client) MeshManagerService {
	return &meshManagerService{
		c:    c,
		name: name,
	}
}

func (c *meshManagerService) CreateMeshCluster(ctx context.Context, in *CreateMeshClusterReq, opts ...client.CallOption) (*CreateMeshClusterResp, error) {
	req := c.c.NewRequest(c.name, "MeshManager.CreateMeshCluster", in)
	out := new(CreateMeshClusterResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerService) DeleteMeshCluster(ctx context.Context, in *DeleteMeshClusterReq, opts ...client.CallOption) (*DeleteMeshClusterResp, error) {
	req := c.c.NewRequest(c.name, "MeshManager.DeleteMeshCluster", in)
	out := new(DeleteMeshClusterResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *meshManagerService) ListMeshCluster(ctx context.Context, in *ListMeshClusterReq, opts ...client.CallOption) (*ListMeshClusterResp, error) {
	req := c.c.NewRequest(c.name, "MeshManager.ListMeshCluster", in)
	out := new(ListMeshClusterResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MeshManager service

type MeshManagerHandler interface {
	CreateMeshCluster(context.Context, *CreateMeshClusterReq, *CreateMeshClusterResp) error
	DeleteMeshCluster(context.Context, *DeleteMeshClusterReq, *DeleteMeshClusterResp) error
	ListMeshCluster(context.Context, *ListMeshClusterReq, *ListMeshClusterResp) error
}

func RegisterMeshManagerHandler(s server.Server, hdlr MeshManagerHandler, opts ...server.HandlerOption) error {
	type meshManager interface {
		CreateMeshCluster(ctx context.Context, in *CreateMeshClusterReq, out *CreateMeshClusterResp) error
		DeleteMeshCluster(ctx context.Context, in *DeleteMeshClusterReq, out *DeleteMeshClusterResp) error
		ListMeshCluster(ctx context.Context, in *ListMeshClusterReq, out *ListMeshClusterResp) error
	}
	type MeshManager struct {
		meshManager
	}
	h := &meshManagerHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MeshManager.CreateMeshCluster",
		Path:    []string{"/meshmanager/v1/meshcluster"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MeshManager.DeleteMeshCluster",
		Path:    []string{"/meshmanager/v1/meshcluster"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "MeshManager.ListMeshCluster",
		Path:    []string{"/meshmanager/v1/meshcluster"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&MeshManager{h}, opts...))
}

type meshManagerHandler struct {
	MeshManagerHandler
}

func (h *meshManagerHandler) CreateMeshCluster(ctx context.Context, in *CreateMeshClusterReq, out *CreateMeshClusterResp) error {
	return h.MeshManagerHandler.CreateMeshCluster(ctx, in, out)
}

func (h *meshManagerHandler) DeleteMeshCluster(ctx context.Context, in *DeleteMeshClusterReq, out *DeleteMeshClusterResp) error {
	return h.MeshManagerHandler.DeleteMeshCluster(ctx, in, out)
}

func (h *meshManagerHandler) ListMeshCluster(ctx context.Context, in *ListMeshClusterReq, out *ListMeshClusterResp) error {
	return h.MeshManagerHandler.ListMeshCluster(ctx, in, out)
}
