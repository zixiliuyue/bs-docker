// Tencent is pleased to support the open source community by making Blueking Container Service available.
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
// Licensed under the MIT License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
// http://opensource.org/licenses/MIT
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied. See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Tencent/bk-bcs/bcs-services/bcs-log-manager/app/k8s (interfaces: LogManagerInterface)

// Package k8s is a generated GoMock package.
package k8s

import (
	context "context"
	logmanager "github.com/Tencent/bk-bcs/bcs-services/bcs-log-manager/app/api/proto/logmanager"
	config "github.com/Tencent/bk-bcs/bcs-services/bcs-log-manager/config"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLogManagerInterface is a mock of LogManagerInterface interface
type MockLogManagerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockLogManagerInterfaceMockRecorder
}

// MockLogManagerInterfaceMockRecorder is the mock recorder for MockLogManagerInterface
type MockLogManagerInterfaceMockRecorder struct {
	mock *MockLogManagerInterface
}

// NewMockLogManagerInterface creates a new mock instance
func NewMockLogManagerInterface(ctrl *gomock.Controller) *MockLogManagerInterface {
	mock := &MockLogManagerInterface{ctrl: ctrl}
	mock.recorder = &MockLogManagerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogManagerInterface) EXPECT() *MockLogManagerInterfaceMockRecorder {
	return m.recorder
}

// HandleAddLogCollectionTask mocks base method
func (m *MockLogManagerInterface) HandleAddLogCollectionTask(arg0 context.Context, arg1 *config.CollectionConfig) *logmanager.CollectionTaskCommonResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleAddLogCollectionTask", arg0, arg1)
	ret0, _ := ret[0].(*logmanager.CollectionTaskCommonResp)
	return ret0
}

// HandleAddLogCollectionTask indicates an expected call of HandleAddLogCollectionTask
func (mr *MockLogManagerInterfaceMockRecorder) HandleAddLogCollectionTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleAddLogCollectionTask", reflect.TypeOf((*MockLogManagerInterface)(nil).HandleAddLogCollectionTask), arg0, arg1)
}

// HandleDeleteLogCollectionTask mocks base method
func (m *MockLogManagerInterface) HandleDeleteLogCollectionTask(arg0 context.Context, arg1 *config.CollectionFilterConfig) *logmanager.CollectionTaskCommonResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleDeleteLogCollectionTask", arg0, arg1)
	ret0, _ := ret[0].(*logmanager.CollectionTaskCommonResp)
	return ret0
}

// HandleDeleteLogCollectionTask indicates an expected call of HandleDeleteLogCollectionTask
func (mr *MockLogManagerInterfaceMockRecorder) HandleDeleteLogCollectionTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleDeleteLogCollectionTask", reflect.TypeOf((*MockLogManagerInterface)(nil).HandleDeleteLogCollectionTask), arg0, arg1)
}

// HandleListLogCollectionTask mocks base method
func (m *MockLogManagerInterface) HandleListLogCollectionTask(arg0 context.Context, arg1 *config.CollectionFilterConfig) map[string][]config.CollectionConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleListLogCollectionTask", arg0, arg1)
	ret0, _ := ret[0].(map[string][]config.CollectionConfig)
	return ret0
}

// HandleListLogCollectionTask indicates an expected call of HandleListLogCollectionTask
func (mr *MockLogManagerInterfaceMockRecorder) HandleListLogCollectionTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleListLogCollectionTask", reflect.TypeOf((*MockLogManagerInterface)(nil).HandleListLogCollectionTask), arg0, arg1)
}

// Start mocks base method
func (m *MockLogManagerInterface) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockLogManagerInterfaceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockLogManagerInterface)(nil).Start))
}
