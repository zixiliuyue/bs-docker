// Tencent is pleased to support the open source community by making Blueking Container Service available.
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
// Licensed under the MIT License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
// http://opensource.org/licenses/MIT
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied. See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Tencent/bk-bcs/bcs-services/bcs-log-manager/pkg/generated/clientset/versioned/typed/bkbcs.tencent.com/v1 (interfaces: BkbcsV1Interface,BKDataApiConfigInterface)

// Package v1 is a generated GoMock package.
package v1

import (
	v1 "github.com/Tencent/bk-bcs/bcs-services/bcs-log-manager/pkg/apis/bkbcs.tencent.com/v1"
	v10 "github.com/Tencent/bk-bcs/bcs-services/bcs-log-manager/pkg/generated/clientset/versioned/typed/bkbcs.tencent.com/v1"
	gomock "github.com/golang/mock/gomock"
	v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	reflect "reflect"
)

// MockBkbcsV1Interface is a mock of BkbcsV1Interface interface
type MockBkbcsV1Interface struct {
	ctrl     *gomock.Controller
	recorder *MockBkbcsV1InterfaceMockRecorder
}

// MockBkbcsV1InterfaceMockRecorder is the mock recorder for MockBkbcsV1Interface
type MockBkbcsV1InterfaceMockRecorder struct {
	mock *MockBkbcsV1Interface
}

// NewMockBkbcsV1Interface creates a new mock instance
func NewMockBkbcsV1Interface(ctrl *gomock.Controller) *MockBkbcsV1Interface {
	mock := &MockBkbcsV1Interface{ctrl: ctrl}
	mock.recorder = &MockBkbcsV1InterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBkbcsV1Interface) EXPECT() *MockBkbcsV1InterfaceMockRecorder {
	return m.recorder
}

// BKDataApiConfigs mocks base method
func (m *MockBkbcsV1Interface) BKDataApiConfigs(arg0 string) v10.BKDataApiConfigInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BKDataApiConfigs", arg0)
	ret0, _ := ret[0].(v10.BKDataApiConfigInterface)
	return ret0
}

// BKDataApiConfigs indicates an expected call of BKDataApiConfigs
func (mr *MockBkbcsV1InterfaceMockRecorder) BKDataApiConfigs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BKDataApiConfigs", reflect.TypeOf((*MockBkbcsV1Interface)(nil).BKDataApiConfigs), arg0)
}

// RESTClient mocks base method
func (m *MockBkbcsV1Interface) RESTClient() rest.Interface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RESTClient")
	ret0, _ := ret[0].(rest.Interface)
	return ret0
}

// RESTClient indicates an expected call of RESTClient
func (mr *MockBkbcsV1InterfaceMockRecorder) RESTClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTClient", reflect.TypeOf((*MockBkbcsV1Interface)(nil).RESTClient))
}

// MockBKDataApiConfigInterface is a mock of BKDataApiConfigInterface interface
type MockBKDataApiConfigInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBKDataApiConfigInterfaceMockRecorder
}

// MockBKDataApiConfigInterfaceMockRecorder is the mock recorder for MockBKDataApiConfigInterface
type MockBKDataApiConfigInterfaceMockRecorder struct {
	mock *MockBKDataApiConfigInterface
}

// NewMockBKDataApiConfigInterface creates a new mock instance
func NewMockBKDataApiConfigInterface(ctrl *gomock.Controller) *MockBKDataApiConfigInterface {
	mock := &MockBKDataApiConfigInterface{ctrl: ctrl}
	mock.recorder = &MockBKDataApiConfigInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBKDataApiConfigInterface) EXPECT() *MockBKDataApiConfigInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockBKDataApiConfigInterface) Create(arg0 *v1.BKDataApiConfig) (*v1.BKDataApiConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*v1.BKDataApiConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockBKDataApiConfigInterfaceMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBKDataApiConfigInterface)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockBKDataApiConfigInterface) Delete(arg0 string, arg1 *v11.DeleteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockBKDataApiConfigInterfaceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBKDataApiConfigInterface)(nil).Delete), arg0, arg1)
}

// DeleteCollection mocks base method
func (m *MockBKDataApiConfigInterface) DeleteCollection(arg0 *v11.DeleteOptions, arg1 v11.ListOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCollection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCollection indicates an expected call of DeleteCollection
func (mr *MockBKDataApiConfigInterfaceMockRecorder) DeleteCollection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCollection", reflect.TypeOf((*MockBKDataApiConfigInterface)(nil).DeleteCollection), arg0, arg1)
}

// Get mocks base method
func (m *MockBKDataApiConfigInterface) Get(arg0 string, arg1 v11.GetOptions) (*v1.BKDataApiConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*v1.BKDataApiConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockBKDataApiConfigInterfaceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBKDataApiConfigInterface)(nil).Get), arg0, arg1)
}

// List mocks base method
func (m *MockBKDataApiConfigInterface) List(arg0 v11.ListOptions) (*v1.BKDataApiConfigList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(*v1.BKDataApiConfigList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockBKDataApiConfigInterfaceMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBKDataApiConfigInterface)(nil).List), arg0)
}

// Patch mocks base method
func (m *MockBKDataApiConfigInterface) Patch(arg0 string, arg1 types.PatchType, arg2 []byte, arg3 ...string) (*v1.BKDataApiConfig, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Patch", varargs...)
	ret0, _ := ret[0].(*v1.BKDataApiConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch
func (mr *MockBKDataApiConfigInterfaceMockRecorder) Patch(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockBKDataApiConfigInterface)(nil).Patch), varargs...)
}

// Update mocks base method
func (m *MockBKDataApiConfigInterface) Update(arg0 *v1.BKDataApiConfig) (*v1.BKDataApiConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*v1.BKDataApiConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockBKDataApiConfigInterfaceMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBKDataApiConfigInterface)(nil).Update), arg0)
}

// Watch mocks base method
func (m *MockBKDataApiConfigInterface) Watch(arg0 v11.ListOptions) (watch.Interface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(watch.Interface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch
func (mr *MockBKDataApiConfigInterfaceMockRecorder) Watch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockBKDataApiConfigInterface)(nil).Watch), arg0)
}
