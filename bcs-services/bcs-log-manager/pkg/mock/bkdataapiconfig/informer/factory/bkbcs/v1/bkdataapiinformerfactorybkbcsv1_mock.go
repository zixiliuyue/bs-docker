// Tencent is pleased to support the open source community by making Blueking Container Service available.
// Copyright (C) 2019 THL A29 Limited, a Tencent company. All rights reserved.
// Licensed under the MIT License (the "License"); you may not use this file except
// in compliance with the License. You may obtain a copy of the License at
// http://opensource.org/licenses/MIT
// Unless required by applicable law or agreed to in writing, software distributed under
// the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
// either express or implied. See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Tencent/bk-bcs/bcs-services/bcs-log-manager/pkg/generated/informers/externalversions/bkbcs.tencent.com/v1 (interfaces: Interface,BKDataApiConfigInformer)

// Package v1 is a generated GoMock package.
package v1

import (
	v1 "github.com/Tencent/bk-bcs/bcs-services/bcs-log-manager/pkg/generated/informers/externalversions/bkbcs.tencent.com/v1"
	v10 "github.com/Tencent/bk-bcs/bcs-services/bcs-log-manager/pkg/generated/listers/bkbcs.tencent.com/v1"
	gomock "github.com/golang/mock/gomock"
	cache "k8s.io/client-go/tools/cache"
	reflect "reflect"
)

// MockInterface is a mock of Interface interface
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// BKDataApiConfigs mocks base method
func (m *MockInterface) BKDataApiConfigs() v1.BKDataApiConfigInformer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BKDataApiConfigs")
	ret0, _ := ret[0].(v1.BKDataApiConfigInformer)
	return ret0
}

// BKDataApiConfigs indicates an expected call of BKDataApiConfigs
func (mr *MockInterfaceMockRecorder) BKDataApiConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BKDataApiConfigs", reflect.TypeOf((*MockInterface)(nil).BKDataApiConfigs))
}

// MockBKDataApiConfigInformer is a mock of BKDataApiConfigInformer interface
type MockBKDataApiConfigInformer struct {
	ctrl     *gomock.Controller
	recorder *MockBKDataApiConfigInformerMockRecorder
}

// MockBKDataApiConfigInformerMockRecorder is the mock recorder for MockBKDataApiConfigInformer
type MockBKDataApiConfigInformerMockRecorder struct {
	mock *MockBKDataApiConfigInformer
}

// NewMockBKDataApiConfigInformer creates a new mock instance
func NewMockBKDataApiConfigInformer(ctrl *gomock.Controller) *MockBKDataApiConfigInformer {
	mock := &MockBKDataApiConfigInformer{ctrl: ctrl}
	mock.recorder = &MockBKDataApiConfigInformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBKDataApiConfigInformer) EXPECT() *MockBKDataApiConfigInformerMockRecorder {
	return m.recorder
}

// Informer mocks base method
func (m *MockBKDataApiConfigInformer) Informer() cache.SharedIndexInformer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Informer")
	ret0, _ := ret[0].(cache.SharedIndexInformer)
	return ret0
}

// Informer indicates an expected call of Informer
func (mr *MockBKDataApiConfigInformerMockRecorder) Informer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Informer", reflect.TypeOf((*MockBKDataApiConfigInformer)(nil).Informer))
}

// Lister mocks base method
func (m *MockBKDataApiConfigInformer) Lister() v10.BKDataApiConfigLister {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lister")
	ret0, _ := ret[0].(v10.BKDataApiConfigLister)
	return ret0
}

// Lister indicates an expected call of Lister
func (mr *MockBKDataApiConfigInformerMockRecorder) Lister() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lister", reflect.TypeOf((*MockBKDataApiConfigInformer)(nil).Lister))
}
