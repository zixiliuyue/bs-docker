syntax = "proto3";

package logmanager;

import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option go_package = "proto/log-manager;logmanager";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "BCS Log Manager Api Doc"
        version : "0.0.1"
    };

    schemes: HTTP
    consumes: "application/json"
    produces: "application/json"
};

// ErrCode error code
enum ErrCode {
    // 0 Sunccess
    ERROR_OK = 0;

    // 101000 log manager failed
    ERROR_LOG_MANAGER_FAILED = 101000;
    ERROR_LOG_MANAGER_PARTIALLY_FAILED = 101001;
    ERROR_NO_SUCH_CLUSTER = 101002;
    ERROR_CLUSTER_ID_REQUIRED = 101003;
    ERROR_CLUSTER_OPERATION_ERROR = 101004;
    ERROR_LOG_MANAGER_INTERNAL_ERROR = 101005;
}

service LogManager {
    rpc ObtainDataID(ObtainDataidReq) returns (ObtainDataidResp) {
        option (google.api.http) = {
            post: "/logmanager/v1/dataid"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "申请DataID"
            summary: "申请DataID"
        };
    }

    rpc CreateCleanStrategy(CreateCleanStrategyReq) returns (CommonResp) {
        option (google.api.http) = {
            post: "/logmanager/v1/dataclean"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "增加数据清洗策略"
            summary: "增加数据清洗策略"
        };
    }

    rpc ListLogCollectionTask(ListLogCollectionTaskReq) returns (ListLogCollectionTaskResp) {
        option (google.api.http) = {
            get: "/logmanager/v1/logcollectiontask"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "查询日志采集任务列表"
            summary: "查询日志采集任务列表"
        };

    }

    rpc CreateLogCollectionTask(CreateLogCollectionTaskReq) returns (CollectionTaskCommonResp) {
        option (google.api.http) = {
            post: "/logmanager/v1/logcollectiontask"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "新增日志采集任务"
            summary: "新增日志采集任务"
        };
    }

    rpc DeleteLogCollectionTask(DeleteLogCollectionTaskReq) returns (CollectionTaskCommonResp) {
        option (google.api.http) = {
            delete: "/logmanager/v1/logcollectiontask"
        };
        option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
            description: "删除日志采集任务"
            summary: "删除日志采集任务"
        };
    }
}

message ObtainDataidReq {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
          title: "ObtainDataidReq"
          description: "申请DataID"
          required: ["appCode", "appSecret", "userName", "bizID", "dataName"]
        }
        example: { value: '{"appCode": "bcs", "appSecret": "xxx", "userName": "xxx", "bizID": 123, "dataName": "bcs_log_test", "maintainers": "xiaoming,xiaohuang,xiaowang,xiaohong"}' }
    };

    string appCode = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "appCode", description: "蓝鲸应用Code"}];
    string appSecret = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "appSecret", description: "蓝鲸应用Secret密钥"}];
    string userName = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "userName", description: "请求者"}];
    int32 bizID = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "bizID", description: "CMDB业务ID"}];
    string dataName = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "dataName", description: "数据名称，可使用下划线，不可使用短线"}];
    string maintainers = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "maintainers", description: "维护者，多个维护者使用逗号分隔"}];
}

message ObtainDataidResp {
    int32 errCode = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "errCode", description: "错误码"}];
    ErrCode errName = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "errName", description: "错误名称"}];
    string message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "message", description: "错误信息"}];
    int32 dataID = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "dataID", description: "dataID"}];
}

message CreateCleanStrategyReq {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
          title: "CreateCleanStrategyReq"
          description: "新增数据清洗策略"
          required: ["default", "appCode", "appSecret", "userName", "bizID", "dataID"]
        }
    };

    bool default = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "default", description: "使用默认容器日志清洗策略"}];
    string appCode = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "appCode", description: "蓝鲸应用Code"}];
    string appSecret = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "appSecret", description: "蓝鲸应用Secret密钥"}];
    string userName = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "userName", description: "请求者"}];
    int32 bizID = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "bizID", description: "CMDB业务ID"}];
    int32 dataID = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "dataID", description: "数据ID"}];
    string strategyName = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "strategyName", description: "策略名称"}];
    string resultTableName = 8 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "resultTableName", description: "清洗表名称"}];
    string JSONConfig = 9 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "JSONConfig", description: "清洗配置"}];
    repeated CleanStrategyFields fields = 10 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "fields", description: "清洗表的字段定义"}];
}

message CleanStrategyFields {
	string fieldName = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "fieldName", description: "清洗表字段名"}];
	string fieldAlias = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "fieldAlias", description: "清洗表字段中文名"}];
	string fieldType = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "fieldType", description: "清洗表字段类型"}];
	bool isDimension = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "isDimension", description: "字段是否为维度"}];
    int32 fieldIndex = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "fieldIndex", description: "字段序号"}];
}

message CommonResp {
    int32 errCode = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "errCode", description: "错误码"}];
    ErrCode errName = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "errName", description: "错误名称"}];
    string message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "message", description: "错误信息"}];
}

message ListLogCollectionTaskReq {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
          title: "ListLogCollectionTaskReq"
          description: "查询日志采集任务列表"
        }
    };

    string clusterIDs = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "clusterIDs", description: "集群ID，逗号分隔多个集群ID，不指定默认为所有集群"}];
    string configName = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "configName", description: "日志采集任务名称"}];
    string configNamespace = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "configNamespace", description: "日志采集任务Namespace，不填默认为default"}];
}

message ListLogCollectionTaskResp {
    int32 errCode = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "errCode", description: "错误码"}];
    ErrCode errName = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "errName", description: "错误名称"}];
    string message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "message", description: "错误信息"}];
    repeated ListLogCollectionTaskRespItem data = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "data", description: "日志采集任务列表"}];
}

message ListLogCollectionTaskRespItem {
    string clusterID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "clusterID", description: "集群ID"}];
    repeated LogCollectionTaskConfig configs= 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "configs", description: "日志采集任务列表"}];
}

message LogCollectionTaskConfig {
    string configName = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "configs", description: "日志采集任务名称"}];
    string configNamespace = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "configs", description: "日志采集任务Namespace"}];
    LogCollectionTaskConfigSpec config = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "configs", description: "日志采集任务详情"}];
}

message LogCollectionTaskConfigSpec {
    string configType = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "configType", description: "日志采集任务类型"}];
	string appId = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "appId", description: "业务id"}];
	string clusterId = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "clusterId", description: "集群id"}];
	bool stdout = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "stdout", description: "是否通过标准输出采集日志"}];
	string stdDataId = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "stdDataId", description: "标准输出采集dataid"}];
	string nonStdDataId = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "nonStdDataId", description: "非标准输出采集dataid"}];
	repeated string logPaths = 7 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "logPaths", description: "日志文件所在目录，对应非标准输出"}];
	map<string, string> logTags = 8 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "logTags", description: "上报自定义附加数据"}];
	string workloadType = 9 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "workloadType", description: "workloadType"}];
	string workloadName = 10 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "workloadName", description: "workloadName"}];
	string workloadNamespace = 11 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "workloadNamespace", description: "workloadNamespace"}];
	repeated ContainerConf containerConfs = 12 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "containerConfs", description: "容器日志采集配置"}];
    bool podLabels = 13 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "podLabels", description: "是否上报pod label"}];
    PodSelector selector = 14 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "selector", description: "pod selector"}];
}

message ContainerConf {
    string containerName = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "containerName", description: "容器名称"}];
	bool stdout = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "stdout", description: "是否通过标准输出采集日志"}];
	string stdDataId = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "stdDataId", description: "标准输出采集dataid"}];
	string nonStdDataId = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "nonStdDataId", description: "非标准输出采集dataid"}];
	repeated string logPaths = 5 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "logPaths", description: "日志文件所在目录，对应非标准输出"}];
	map<string, string> logTags = 6 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "logTags", description: "上报自定义附加数据"}];
}

message PodSelector {
    map<string, string> matchLabels = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "matchLabels", description: "Key Value 形式的 label 匹配"}];
    repeated SelectorExpression matchExpressions = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "matchExpressions", description: "表达式形式的label匹配"}];
}

message SelectorExpression {
    string key = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "key", description: "Label Key"}];
    string operator = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "operator", description: "匹配操作类型"}];
    repeated string values = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "key", description: "Label Values"}];
}

message CreateLogCollectionTaskReq {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
          title: "CreateLogCollectionTaskReq"
          description: "新增日志采集任务"
          required: ["clusterIDs", "config"]
        }
    };

    string clusterIDs = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "clusterIDs", description: "集群ID，逗号分隔多个集群ID，不指定默认为所有集群"}];
    LogCollectionTaskConfig config = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "config", description: "日志采集任务详情"}];
}

message DeleteLogCollectionTaskReq {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
        json_schema: {
          title: "CreateLogCollectionTaskReq"
          description: "删除日志采集任务"
        }
    };

    string clusterIDs = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "clusterIDs", description: "集群ID，逗号分隔多个集群ID，不指定默认无动作"}];
    string configName = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "configName", description: "日志采集任务名称"}];
    string configNamespace = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "configNamespace", description: "日志采集任务Namespace，不填默认无动作"}];
}

message CollectionTaskCommonResp {
    int32 errCode = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "errCode", description: "错误码"}];
    ErrCode errName = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "errName", description: "错误名称"}];
    string message = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "message", description: "错误信息"}];
    repeated ClusterDimensionalResp errResult = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "errResult", description: "集群维度的错误信息"}];
}

message ClusterDimensionalResp {
    string clusterID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "clusterID", description: "集群id"}];
    int32 errCode = 2 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "errCode", description: "错误码"}];
    ErrCode errName = 3 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "errName", description: "错误名称"}];
    string message = 4 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {title: "message", description: "错误信息"}];
}