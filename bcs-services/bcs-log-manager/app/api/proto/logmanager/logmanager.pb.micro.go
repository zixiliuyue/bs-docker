// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: logmanager.proto

package logmanager

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for LogManager service

func NewLogManagerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{
		&api.Endpoint{
			Name:    "LogManager.ObtainDataID",
			Path:    []string{"/logmanager/v1/dataid"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "LogManager.CreateCleanStrategy",
			Path:    []string{"/logmanager/v1/dataclean"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "LogManager.ListLogCollectionTask",
			Path:    []string{"/logmanager/v1/logcollectiontask"},
			Method:  []string{"GET"},
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "LogManager.CreateLogCollectionTask",
			Path:    []string{"/logmanager/v1/logcollectiontask"},
			Method:  []string{"POST"},
			Body:    "*",
			Handler: "rpc",
		},
		&api.Endpoint{
			Name:    "LogManager.DeleteLogCollectionTask",
			Path:    []string{"/logmanager/v1/logcollectiontask"},
			Method:  []string{"DELETE"},
			Body:    "",
			Handler: "rpc",
		},
	}
}

// Client API for LogManager service

type LogManagerService interface {
	ObtainDataID(ctx context.Context, in *ObtainDataidReq, opts ...client.CallOption) (*ObtainDataidResp, error)
	CreateCleanStrategy(ctx context.Context, in *CreateCleanStrategyReq, opts ...client.CallOption) (*CommonResp, error)
	ListLogCollectionTask(ctx context.Context, in *ListLogCollectionTaskReq, opts ...client.CallOption) (*ListLogCollectionTaskResp, error)
	CreateLogCollectionTask(ctx context.Context, in *CreateLogCollectionTaskReq, opts ...client.CallOption) (*CollectionTaskCommonResp, error)
	DeleteLogCollectionTask(ctx context.Context, in *DeleteLogCollectionTaskReq, opts ...client.CallOption) (*CollectionTaskCommonResp, error)
}

type logManagerService struct {
	c    client.Client
	name string
}

func NewLogManagerService(name string, c client.Client) LogManagerService {
	return &logManagerService{
		c:    c,
		name: name,
	}
}

func (c *logManagerService) ObtainDataID(ctx context.Context, in *ObtainDataidReq, opts ...client.CallOption) (*ObtainDataidResp, error) {
	req := c.c.NewRequest(c.name, "LogManager.ObtainDataID", in)
	out := new(ObtainDataidResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logManagerService) CreateCleanStrategy(ctx context.Context, in *CreateCleanStrategyReq, opts ...client.CallOption) (*CommonResp, error) {
	req := c.c.NewRequest(c.name, "LogManager.CreateCleanStrategy", in)
	out := new(CommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logManagerService) ListLogCollectionTask(ctx context.Context, in *ListLogCollectionTaskReq, opts ...client.CallOption) (*ListLogCollectionTaskResp, error) {
	req := c.c.NewRequest(c.name, "LogManager.ListLogCollectionTask", in)
	out := new(ListLogCollectionTaskResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logManagerService) CreateLogCollectionTask(ctx context.Context, in *CreateLogCollectionTaskReq, opts ...client.CallOption) (*CollectionTaskCommonResp, error) {
	req := c.c.NewRequest(c.name, "LogManager.CreateLogCollectionTask", in)
	out := new(CollectionTaskCommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logManagerService) DeleteLogCollectionTask(ctx context.Context, in *DeleteLogCollectionTaskReq, opts ...client.CallOption) (*CollectionTaskCommonResp, error) {
	req := c.c.NewRequest(c.name, "LogManager.DeleteLogCollectionTask", in)
	out := new(CollectionTaskCommonResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LogManager service

type LogManagerHandler interface {
	ObtainDataID(context.Context, *ObtainDataidReq, *ObtainDataidResp) error
	CreateCleanStrategy(context.Context, *CreateCleanStrategyReq, *CommonResp) error
	ListLogCollectionTask(context.Context, *ListLogCollectionTaskReq, *ListLogCollectionTaskResp) error
	CreateLogCollectionTask(context.Context, *CreateLogCollectionTaskReq, *CollectionTaskCommonResp) error
	DeleteLogCollectionTask(context.Context, *DeleteLogCollectionTaskReq, *CollectionTaskCommonResp) error
}

func RegisterLogManagerHandler(s server.Server, hdlr LogManagerHandler, opts ...server.HandlerOption) error {
	type logManager interface {
		ObtainDataID(ctx context.Context, in *ObtainDataidReq, out *ObtainDataidResp) error
		CreateCleanStrategy(ctx context.Context, in *CreateCleanStrategyReq, out *CommonResp) error
		ListLogCollectionTask(ctx context.Context, in *ListLogCollectionTaskReq, out *ListLogCollectionTaskResp) error
		CreateLogCollectionTask(ctx context.Context, in *CreateLogCollectionTaskReq, out *CollectionTaskCommonResp) error
		DeleteLogCollectionTask(ctx context.Context, in *DeleteLogCollectionTaskReq, out *CollectionTaskCommonResp) error
	}
	type LogManager struct {
		logManager
	}
	h := &logManagerHandler{hdlr}
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LogManager.ObtainDataID",
		Path:    []string{"/logmanager/v1/dataid"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LogManager.CreateCleanStrategy",
		Path:    []string{"/logmanager/v1/dataclean"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LogManager.ListLogCollectionTask",
		Path:    []string{"/logmanager/v1/logcollectiontask"},
		Method:  []string{"GET"},
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LogManager.CreateLogCollectionTask",
		Path:    []string{"/logmanager/v1/logcollectiontask"},
		Method:  []string{"POST"},
		Body:    "*",
		Handler: "rpc",
	}))
	opts = append(opts, api.WithEndpoint(&api.Endpoint{
		Name:    "LogManager.DeleteLogCollectionTask",
		Path:    []string{"/logmanager/v1/logcollectiontask"},
		Method:  []string{"DELETE"},
		Body:    "",
		Handler: "rpc",
	}))
	return s.Handle(s.NewHandler(&LogManager{h}, opts...))
}

type logManagerHandler struct {
	LogManagerHandler
}

func (h *logManagerHandler) ObtainDataID(ctx context.Context, in *ObtainDataidReq, out *ObtainDataidResp) error {
	return h.LogManagerHandler.ObtainDataID(ctx, in, out)
}

func (h *logManagerHandler) CreateCleanStrategy(ctx context.Context, in *CreateCleanStrategyReq, out *CommonResp) error {
	return h.LogManagerHandler.CreateCleanStrategy(ctx, in, out)
}

func (h *logManagerHandler) ListLogCollectionTask(ctx context.Context, in *ListLogCollectionTaskReq, out *ListLogCollectionTaskResp) error {
	return h.LogManagerHandler.ListLogCollectionTask(ctx, in, out)
}

func (h *logManagerHandler) CreateLogCollectionTask(ctx context.Context, in *CreateLogCollectionTaskReq, out *CollectionTaskCommonResp) error {
	return h.LogManagerHandler.CreateLogCollectionTask(ctx, in, out)
}

func (h *logManagerHandler) DeleteLogCollectionTask(ctx context.Context, in *DeleteLogCollectionTaskReq, out *CollectionTaskCommonResp) error {
	return h.LogManagerHandler.DeleteLogCollectionTask(ctx, in, out)
}
