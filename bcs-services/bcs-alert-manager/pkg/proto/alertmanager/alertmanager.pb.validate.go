// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/alertmanager/alertmanager.proto

package alertmanager

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _alertmanager_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateRawAlertInfoReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRawAlertInfoReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetStarttime() <= 0 {
		return CreateRawAlertInfoReqValidationError{
			field:  "Starttime",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Endtime

	if utf8.RuneCountInString(m.GetGeneratorurl()) > 1024 {
		return CreateRawAlertInfoReqValidationError{
			field:  "Generatorurl",
			reason: "value length must be at most 1024 runes",
		}
	}

	if len(m.GetAnnotations()) < 1 {
		return CreateRawAlertInfoReqValidationError{
			field:  "Annotations",
			reason: "value must contain at least 1 pair(s)",
		}
	}

	if len(m.GetLabels()) < 1 {
		return CreateRawAlertInfoReqValidationError{
			field:  "Labels",
			reason: "value must contain at least 1 pair(s)",
		}
	}

	return nil
}

// CreateRawAlertInfoReqValidationError is the validation error returned by
// CreateRawAlertInfoReq.Validate if the designated constraints aren't met.
type CreateRawAlertInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRawAlertInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRawAlertInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRawAlertInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRawAlertInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRawAlertInfoReqValidationError) ErrorName() string {
	return "CreateRawAlertInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRawAlertInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRawAlertInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRawAlertInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRawAlertInfoReqValidationError{}

// Validate checks the field values on CreateRawAlertInfoResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRawAlertInfoResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ErrCode

	// no validation rules for ErrMsg

	return nil
}

// CreateRawAlertInfoRespValidationError is the validation error returned by
// CreateRawAlertInfoResp.Validate if the designated constraints aren't met.
type CreateRawAlertInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRawAlertInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRawAlertInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRawAlertInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRawAlertInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRawAlertInfoRespValidationError) ErrorName() string {
	return "CreateRawAlertInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRawAlertInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRawAlertInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRawAlertInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRawAlertInfoRespValidationError{}

// Validate checks the field values on CreateBusinessAlertInfoReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateBusinessAlertInfoReq) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetStarttime() <= 0 {
		return CreateBusinessAlertInfoReqValidationError{
			field:  "Starttime",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Endtime

	if utf8.RuneCountInString(m.GetGeneratorurl()) > 1024 {
		return CreateBusinessAlertInfoReqValidationError{
			field:  "Generatorurl",
			reason: "value length must be at most 1024 runes",
		}
	}

	if _, ok := _CreateBusinessAlertInfoReq_AlarmType_InLookup[m.GetAlarmType()]; !ok {
		return CreateBusinessAlertInfoReqValidationError{
			field:  "AlarmType",
			reason: "value must be in list [resource module]",
		}
	}

	if utf8.RuneCountInString(m.GetClusterID()) < 1 {
		return CreateBusinessAlertInfoReqValidationError{
			field:  "ClusterID",
			reason: "value length must be at least 1 runes",
		}
	}

	if m.GetAlertAnnotation() == nil {
		return CreateBusinessAlertInfoReqValidationError{
			field:  "AlertAnnotation",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetAlertAnnotation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessAlertInfoReqValidationError{
				field:  "AlertAnnotation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetModuleAlertLabel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessAlertInfoReqValidationError{
				field:  "ModuleAlertLabel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetResourceAlertLabel()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBusinessAlertInfoReqValidationError{
				field:  "ResourceAlertLabel",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateBusinessAlertInfoReqValidationError is the validation error returned
// by CreateBusinessAlertInfoReq.Validate if the designated constraints aren't met.
type CreateBusinessAlertInfoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessAlertInfoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessAlertInfoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessAlertInfoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessAlertInfoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessAlertInfoReqValidationError) ErrorName() string {
	return "CreateBusinessAlertInfoReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessAlertInfoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessAlertInfoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessAlertInfoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessAlertInfoReqValidationError{}

var _CreateBusinessAlertInfoReq_AlarmType_InLookup = map[string]struct{}{
	"resource": {},
	"module":   {},
}

// Validate checks the field values on CreateBusinessAlertInfoResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateBusinessAlertInfoResp) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ErrCode

	// no validation rules for ErrMsg

	return nil
}

// CreateBusinessAlertInfoRespValidationError is the validation error returned
// by CreateBusinessAlertInfoResp.Validate if the designated constraints
// aren't met.
type CreateBusinessAlertInfoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBusinessAlertInfoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBusinessAlertInfoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBusinessAlertInfoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBusinessAlertInfoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBusinessAlertInfoRespValidationError) ErrorName() string {
	return "CreateBusinessAlertInfoRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBusinessAlertInfoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBusinessAlertInfoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBusinessAlertInfoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBusinessAlertInfoRespValidationError{}

// Validate checks the field values on AlertAnnotation with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AlertAnnotation) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetMessage()) < 1 {
		return AlertAnnotationValidationError{
			field:  "Message",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for Comment

	return nil
}

// AlertAnnotationValidationError is the validation error returned by
// AlertAnnotation.Validate if the designated constraints aren't met.
type AlertAnnotationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertAnnotationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertAnnotationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertAnnotationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertAnnotationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertAnnotationValidationError) ErrorName() string { return "AlertAnnotationValidationError" }

// Error satisfies the builtin error interface
func (e AlertAnnotationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertAnnotation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertAnnotationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertAnnotationValidationError{}

// Validate checks the field values on CommonAlertLabel with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CommonAlertLabel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AlarmType

	if utf8.RuneCountInString(m.GetClusterID()) < 1 {
		return CommonAlertLabelValidationError{
			field:  "ClusterID",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// CommonAlertLabelValidationError is the validation error returned by
// CommonAlertLabel.Validate if the designated constraints aren't met.
type CommonAlertLabelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonAlertLabelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonAlertLabelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonAlertLabelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonAlertLabelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonAlertLabelValidationError) ErrorName() string { return "CommonAlertLabelValidationError" }

// Error satisfies the builtin error interface
func (e CommonAlertLabelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonAlertLabel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonAlertLabelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonAlertLabelValidationError{}

// Validate checks the field values on ModuleAlertLabel with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ModuleAlertLabel) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetModuleName()) < 1 {
		return ModuleAlertLabelValidationError{
			field:  "ModuleName",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for ModuleIP

	if utf8.RuneCountInString(m.GetAlarmName()) < 1 {
		return ModuleAlertLabelValidationError{
			field:  "AlarmName",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for AlarmLevel

	return nil
}

// ModuleAlertLabelValidationError is the validation error returned by
// ModuleAlertLabel.Validate if the designated constraints aren't met.
type ModuleAlertLabelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleAlertLabelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleAlertLabelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleAlertLabelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleAlertLabelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleAlertLabelValidationError) ErrorName() string { return "ModuleAlertLabelValidationError" }

// Error satisfies the builtin error interface
func (e ModuleAlertLabelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModuleAlertLabel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleAlertLabelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleAlertLabelValidationError{}

// Validate checks the field values on ResourceAlertLabel with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResourceAlertLabel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AlarmName

	// no validation rules for NameSpace

	if utf8.RuneCountInString(m.GetAlarmResourceType()) < 1 {
		return ResourceAlertLabelValidationError{
			field:  "AlarmResourceType",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for AlarmResourceName

	// no validation rules for AlarmID

	// no validation rules for AlarmLevel

	return nil
}

// ResourceAlertLabelValidationError is the validation error returned by
// ResourceAlertLabel.Validate if the designated constraints aren't met.
type ResourceAlertLabelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceAlertLabelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceAlertLabelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceAlertLabelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceAlertLabelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceAlertLabelValidationError) ErrorName() string {
	return "ResourceAlertLabelValidationError"
}

// Error satisfies the builtin error interface
func (e ResourceAlertLabelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceAlertLabel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceAlertLabelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceAlertLabelValidationError{}
